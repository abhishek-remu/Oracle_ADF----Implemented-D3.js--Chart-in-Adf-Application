<?xml version='1.0' encoding='UTF-8'?>
<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page" version="2.1" xmlns:f="http://java.sun.com/jsf/core"
          xmlns:af="http://xmlns.oracle.com/adf/faces/rich" xmlns="http://www.w3.org/1999/xhtml">
    <jsp:directive.page contentType="text/html;charset=UTF-8"/>
    <f:view>
        <af:document title="simple.jspx" id="d1">
            <style type="text/css">
                .node {
                }

                .link {
                    stroke: #999;
                    stroke-opacity: .6;
                    stroke-width: 1px;
                }
            </style>
            <svg width="1100" height="1100"></svg>
            <script src="http://d3js.org/d3.v4.min.js" type="text/javascript"></script>
            <script src="http://d3js.org/d3-selection-multi.v1.js"></script>
            <script type="text/javascript">
            
              function sayHello1( graph) {
               
               
                var linkss =graph.links;
                var nodess=graph.nodes;
                
                
               
                update(linkss, nodess);
              }
              
              var colors = d3.scaleOrdinal(d3.schemeCategory10);

              var svg = d3.select("svg"), width =  + svg.attr("width"), height =  + svg.attr("height"), node, link;

              svg.append('defs').append('marker').attrs( {
                  'id' : 'arrowhead', 'viewBox' : '-0 -5 10 10', 'refX' : 13, 'refY' : 0, 'orient' : 'auto', 'markerWidth' : 13, 'markerHeight' : 13, 'xoverflow' : 'visible'
              }).append('svg:path').attr('d', 'M 0,-5 L 10 ,0 L 0,5').attr('fill', '#999').style('stroke', 'none');

              var simulation = d3.forceSimulation().force("link", d3.forceLink().id(function (d) {
                  return d.id;
              }).distance(100).strength(1)).force("charge", d3.forceManyBody()).force("center", d3.forceCenter(width / 2, height / 2));

              d3.json("d3ChartLayout1.json", function (error, graph) {
                  if (error)
                      throw error;
                       alert("graph "+graph);
                      alert("links "+graph.links);
                      alert("nodes"+graph.nodes);
                      
                  update(graph.links, graph.nodes);
              })

              //function generateNetworkGraph(graph){
              //  update(graph.links, graph.nodes);
              //    
              //}
              function update(links, nodes) {
                  link = svg.selectAll(".link").data(links).enter().append("line").attr("class", "link").attr('marker-end', 'url(#arrowhead)')

                  link.append("title").text(function (d) {
                      return d.type;
                  });

                  edgepaths = svg.selectAll(".edgepath").data(links).enter().append('path').attrs( {
                      'class' : 'edgepath', 'fill-opacity' : 0, 'stroke-opacity' : 0, 'id' : function (d, i) {
                          return 'edgepath' + i
                      }
                  }).style("pointer-events", "none");

                  edgelabels = svg.selectAll(".edgelabel").data(links).enter().append('text').style("pointer-events", "none").attrs( {
                      'class' : 'edgelabel', 'id' : function (d, i) {
                          return 'edgelabel' + i
                      },
                      'font-size' : 10, 'fill' : '#aaa'
                  });

                  edgelabels.append('textPath').attr('xlink:href', function (d, i) {
                      return '#edgepath' + i
                  }).style("text-anchor", "middle").style("pointer-events", "none").attr("startOffset", "50%").text(function (d) {
                      return d.type
                  });

                  node = svg.selectAll(".node").data(nodes).enter().append("g").attr("class", "node").call(d3.drag().on("start", dragstarted).on("drag", dragged)
                  //.on("end", dragended)
);

                  node.append("circle").attr("r", 5).style("fill", function (d, i) {
                      return colors(i);
                  })

                  node.append("title").text(function (d) {
                      return d.id;
                  });

                  node.append("text").attr("dy",  - 3).text(function (d) {
                      return d.name + ":" + d.label;
                  });

                  simulation.nodes(nodes).on("tick", ticked);

                  simulation.force("link").links(links);
              }

              function ticked() {
                  link.attr("x1", function (d) {
                      return d.source.x;
                  }).attr("y1", function (d) {
                      return d.source.y;
                  }).attr("x2", function (d) {
                      return d.target.x;
                  }).attr("y2", function (d) {
                      return d.target.y;
                  });

                  node.attr("transform", function (d) {
                      return "translate(" + d.x + ", " + d.y + ")";
                  });

                  edgepaths.attr('d', function (d) {
                      return 'M ' + d.source.x + ' ' + d.source.y + ' L ' + d.target.x + ' ' + d.target.y;
                  });

                  edgelabels.attr('transform', function (d) {
                      if (d.target.x &lt; d.source.x) {
                          var bbox = this.getBBox();

                          rx = bbox.x + bbox.width / 2;
                          ry = bbox.y + bbox.height / 2;
                          return 'rotate(180 ' + rx + ' ' + ry + ')';
                      }
                      else {
                          return 'rotate(0)';
                      }
                  });
              }

              function dragstarted(d) {
                  if (!d3.event.active)
                      simulation.alphaTarget(0.3).restart()
                  d.fx = d.x;
                  d.fy = d.y;
              }

              function dragged(d) {
                  d.fx = d3.event.x;
                  d.fy = d3.event.y;
              }

              function dragended(d) {
                  if (!d3.event.active)
                      simulation.alphaTarget(0);
                  d.fx = undefined;
                  d.fy = undefined;
              }
            </script>
            <af:outputText id="ot1" value="#{D3DynamicBubbleChartBean.d3JsonObject}" visible="false"/>
      
        </af:document>
    </f:view>
</jsp:root>
